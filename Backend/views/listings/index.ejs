<% layout("/layouts/boilerplate") %>

<style>
  .filter-section {
    padding: 1.5rem 0;
    border-bottom: 1px solid #eaeaea;
    margin-bottom: 2rem;
  }
  
  .filter-container {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: 1.5rem;
  }

  .filter {
    display: flex;
    flex-direction: column;
    align-items: center;
    cursor: pointer;
    transition: all 0.3s ease;
    padding: 0.5rem;
    border-radius: 0.5rem;
    width: 80px;
  }
  
  .filter:hover {
    background-color: #f7f7f7;
    transform: translateY(-2px);
  }
  
  .filter.active {
    border-bottom: 2px solid #000;
    opacity: 1;
    font-weight: 500;
  }
  
  .filter i {
    font-size: 1.25rem;
    margin-bottom: 0.5rem;
  }
  
  .filter p {
    font-size: 0.75rem;
    margin: 0;
    text-align: center;
  }
  
  .tax-toggle {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1rem;
    border: 1px solid #ddd;
    border-radius: 2rem;
    background-color: white;
    margin-left: auto;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
  }
  
  .listings-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 2rem;
    padding: 1rem 0;
  }
  
  .listing-card {
    border: none;
    border-radius: 0.75rem;
    overflow: hidden;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    height: 100%;
    position: relative;
  }
  
  .listing-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 20px rgba(0,0,0,0.1);
  }
  
  .listing-card img {
    height: 250px;
    width: 100%;
    object-fit: cover;
    transition: transform 0.5s ease;
  }
  
  .listing-card:hover img {
    transform: scale(1.03);
  }
  
  .card-body {
    padding: 1.25rem;
  }
  
  .card-text {
    margin: 0;
  }
  
  .card-text b {
    font-size: 1.1rem;
    display: block;
    margin-bottom: 0.25rem;
  }
  
  .tax-info {
    color: #666;
    font-size: 0.85rem;
    display: none;
  }

  /* Wishlist icon styles */
  .wishlist-icon {
    position: absolute;
    top: 15px;
    right: 15px;
    font-size: 1.5rem;
    color: white;
    text-shadow: 0 2px 4px rgba(0,0,0,0.3);
    cursor: pointer;
    transition: all 0.3s ease;
    z-index: 10;
  }

  .wishlist-icon:hover {
    transform: scale(1.2);
  }

  .wishlist-icon.active {
    color: #ff385c;
    animation: heartBeat 0.5s;
  }

  @keyframes heartBeat {
    0% { transform: scale(1); }
    25% { transform: scale(1.3); }
    50% { transform: scale(1); }
    75% { transform: scale(1.3); }
    100% { transform: scale(1); }
  }

  .image-container {
    position: relative;
  }

  .no-results {
    grid-column: 1 / -1;
    text-align: center;
    padding: 3rem;
    color: #666;
  }
  
  @media (max-width: 768px) {
    .filter-container {
      gap: 1rem;
    }
    
    .filter {
      width: 70px;
    }
    
    .tax-toggle {
      margin-left: 0;
      width: 100%;
      justify-content: center;
    }
  }
</style>

<div class="container">
  <!-- Filters Section -->
  <div class="filter-section">
    <div class="filter-container">
      <div class="filter active" data-filter="all">
        <div><i class="fa-solid fa-fire"></i></div>
        <p>Trending</p>
      </div>
      <div class="filter" data-filter="room">
        <div><i class="fa-solid fa-bed"></i></div>
        <p>Rooms</p>
      </div>
      <div class="filter" data-filter="city">
        <div><i class="fa-solid fa-mountain-city"></i></div>
        <p>Cities</p>
      </div>
      <div class="filter" data-filter="farm">
        <div><i class="fa-solid fa-wheat-awn"></i></div>
        <p>Farms</p>
      </div>
      <div class="filter" data-filter="mountain">
        <div><i class="fa-solid fa-mountain-sun"></i></div>
        <p>Mountains</p>
      </div>
      <div class="filter" data-filter="castle">
        <div><i class="fa-brands fa-fort-awesome"></i></div>
        <p>Castles</p>
      </div>
      <div class="filter" data-filter="camping">
        <div><i class="fa-solid fa-campground"></i></div>
        <p>Camping</p>
      </div>
      <div class="tax-toggle">
        <div class="form-check form-switch mb-0">
          <input class="form-check-input" type="checkbox" role="switch" id="taxSwitch">
          <label class="form-check-label" for="taxSwitch">Show taxes</label>
        </div>
      </div>
    </div>
  </div>

  <!-- Listings Grid -->
  <div class="listings-grid">
    <% for (let listing of AllListings){ %>
      <a href="/listings/<%= listing._id%>" class="text-decoration-none text-dark listing-item" 
         data-category="<%= listing.category || 'all' %>"
         data-price="<%= listing.price %>">
        <div class="listing-card card">
          <div class="image-container">
            <img src="<%= listing.image.url || 'https://images.unsplash.com/photo-1603477849227-705c424d1d80?q=80&w=1074&auto=format&fit=crop' %>" 
                 class="card-img-top" 
                 alt="<%= listing.title %>">
            <i class="wishlist-icon fa-regular fa-heart" 
               data-listing-id="<%= listing._id %>" 
               onclick="toggleWishlist(event, '<%= listing._id %>')"></i>
          </div>
          <div class="card-body">
            <p class="card-text">
              <b><%= listing.title %></b>
              <% if (listing && listing.price) { %>
                <span class="d-block mt-1">₹<%= listing.price.toLocaleString("en-IN") %> <small>night</small></span>
                <span class="tax-info">+ ₹<%= Math.round(listing.price * 0.18).toLocaleString("en-IN") %> taxes</span>
              <% } %>
            </p>
          </div>
        </div>
      </a>
    <% } %>
    <div class="no-results" style="display: none;">
      <h4>No listings found matching your criteria</h4>
      <p>Try adjusting your filters</p>
    </div>
  </div>
</div>

<script>
  // Tax toggle functionality
  const taxSwitch = document.getElementById("taxSwitch");
  const taxInfoElements = document.querySelectorAll(".tax-info");
  
  taxSwitch.addEventListener("change", () => {
    taxInfoElements.forEach(info => {
      info.style.display = taxSwitch.checked ? "block" : "none";
    });
  });
  
  // Filter selection functionality
  const filters = document.querySelectorAll(".filter");
  const listingItems = document.querySelectorAll(".listing-item");
  const noResultsMessage = document.querySelector(".no-results");

  // Define filter categories and their mappings
  const filterCategories = {
    'all': 'all',
    'room': 'room',
    'city': 'city',
    'farm': 'farm',
    'mountain': 'mountain',
    'castle': 'castle',
    'camping': 'camping'
  };

  // Initialize with 'all' filter active
  let currentFilter = 'all';

  filters.forEach(filter => {
    filter.addEventListener("click", () => {
      // Update active filter
      filters.forEach(f => f.classList.remove("active"));
      filter.classList.add("active");
      
      // Get the filter category
      currentFilter = filter.dataset.filter;
      
      // Apply the filter
      applyFilter(currentFilter);
    });
  });

  // Function to apply the selected filter
  function applyFilter(filter) {
    let hasVisibleItems = false;
    
    listingItems.forEach(item => {
      const itemCategory = item.dataset.category.toLowerCase();
      
      if (filter === 'all' || itemCategory.includes(filter)) {
        item.style.display = 'block';
        hasVisibleItems = true;
      } else {
        item.style.display = 'none';
      }
    });
    
    // Show/hide no results message
    noResultsMessage.style.display = hasVisibleItems ? 'none' : 'block';
  }

  // Initialize wishlist icons based on user's wishlist
  document.addEventListener('DOMContentLoaded', () => {
    // Check if user is logged in and has wishlist items
    const wishlistItems = JSON.parse(localStorage.getItem('wishlist')) || [];
    wishlistItems.forEach(id => {
      const icon = document.querySelector(`.wishlist-icon[data-listing-id="${id}"]`);
      if (icon) {
        icon.classList.remove('fa-regular');
        icon.classList.add('fa-solid', 'active');
      }
    });
    
    // Apply initial filter
    applyFilter(currentFilter);
  });

  // Toggle wishlist function
  function toggleWishlist(event, listingId) {
    event.preventDefault();
    event.stopPropagation();
    
    const icon = event.target;
    const isActive = icon.classList.contains('fa-solid');
    
    // Toggle the icon
    if (isActive) {
      icon.classList.remove('fa-solid', 'active');
      icon.classList.add('fa-regular');
      removeFromWishlist(listingId);
    } else {
      icon.classList.remove('fa-regular');
      icon.classList.add('fa-solid', 'active');
      addToWishlist(listingId);
    }
  }

  // Add to wishlist
  function addToWishlist(listingId) {
    let wishlist = JSON.parse(localStorage.getItem('wishlist')) || [];
    if (!wishlist.includes(listingId)) {
      wishlist.push(listingId);
      localStorage.setItem('wishlist', JSON.stringify(wishlist));
      
      // In a real app, you would also make an API call to save on the server
      fetch('/wishlists/add', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ listingId }),
        credentials: 'include'
      }).catch(err => console.error('Error adding to wishlist:', err));
    }
  }

  // Remove from wishlist
  function removeFromWishlist(listingId) {
    let wishlist = JSON.parse(localStorage.getItem('wishlist')) || [];
    wishlist = wishlist.filter(id => id !== listingId);
    localStorage.setItem('wishlist', JSON.stringify(wishlist));
    
    // In a real app, you would also make an API call to remove from the server
    fetch('/wishlists/remove', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ listingId }),
        credentials: 'include'
      }).catch(err => console.error('Error removing from wishlist:', err));
  }
</script>